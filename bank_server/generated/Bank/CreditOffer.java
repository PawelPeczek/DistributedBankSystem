//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `bank-interface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Bank;

public class CreditOffer extends com.zeroc.Ice.Value
{
    public CreditOffer()
    {
        this.foreignCurrency = Currency.PLN;
    }

    public CreditOffer(float costInPLN)
    {
        this.costInPLN = costInPLN;
        this.foreignCurrency = Currency.PLN;
    }

    public CreditOffer(float costInPLN, float costInForeignCurrency, Currency foreignCurrency)
    {
        this.costInPLN = costInPLN;
        setCostInForeignCurrency(costInForeignCurrency);
        setForeignCurrency(foreignCurrency);
    }

    public float costInPLN;

    private float costInForeignCurrency;
    private boolean _costInForeignCurrency;

    public float getCostInForeignCurrency()
    {
        if(!_costInForeignCurrency)
        {
            throw new java.util.NoSuchElementException("costInForeignCurrency is not set");
        }
        return costInForeignCurrency;
    }

    public void setCostInForeignCurrency(float costInForeignCurrency)
    {
        _costInForeignCurrency = true;
        this.costInForeignCurrency = costInForeignCurrency;
    }

    public boolean hasCostInForeignCurrency()
    {
        return _costInForeignCurrency;
    }

    public void clearCostInForeignCurrency()
    {
        _costInForeignCurrency = false;
    }

    public void optionalCostInForeignCurrency(java.util.Optional<Float> v)
    {
        if(v == null || !v.isPresent())
        {
            _costInForeignCurrency = false;
        }
        else
        {
            _costInForeignCurrency = true;
            costInForeignCurrency = v.get();
        }
    }

    public java.util.Optional<Float> optionalCostInForeignCurrency()
    {
        if(_costInForeignCurrency)
        {
            return java.util.Optional.of(costInForeignCurrency);
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private Currency foreignCurrency;
    private boolean _foreignCurrency;

    public Currency getForeignCurrency()
    {
        if(!_foreignCurrency)
        {
            throw new java.util.NoSuchElementException("foreignCurrency is not set");
        }
        return foreignCurrency;
    }

    public void setForeignCurrency(Currency foreignCurrency)
    {
        _foreignCurrency = true;
        this.foreignCurrency = foreignCurrency;
    }

    public boolean hasForeignCurrency()
    {
        return _foreignCurrency;
    }

    public void clearForeignCurrency()
    {
        _foreignCurrency = false;
    }

    public void optionalForeignCurrency(java.util.Optional<Currency> v)
    {
        if(v == null || !v.isPresent())
        {
            _foreignCurrency = false;
        }
        else
        {
            _foreignCurrency = true;
            foreignCurrency = v.get();
        }
    }

    public java.util.Optional<Currency> optionalForeignCurrency()
    {
        if(_foreignCurrency)
        {
            return java.util.Optional.of(foreignCurrency);
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    public CreditOffer clone()
    {
        return (CreditOffer)super.clone();
    }

    public static String ice_staticId()
    {
        return "::Bank::CreditOffer";
    }

    @Override
    public String ice_id()
    {
        return ice_staticId();
    }

    /** @hidden */
    public static final long serialVersionUID = -6336611453956769929L;

    /** @hidden */
    @Override
    protected void _iceWriteImpl(com.zeroc.Ice.OutputStream ostr_)
    {
        ostr_.startSlice(ice_staticId(), -1, true);
        ostr_.writeFloat(costInPLN);
        if(_costInForeignCurrency)
        {
            ostr_.writeFloat(1, costInForeignCurrency);
        }
        if(_foreignCurrency)
        {
            Currency.ice_write(ostr_, 2, foreignCurrency);
        }
        ostr_.endSlice();
    }

    /** @hidden */
    @Override
    protected void _iceReadImpl(com.zeroc.Ice.InputStream istr_)
    {
        istr_.startSlice();
        costInPLN = istr_.readFloat();
        if(_costInForeignCurrency = istr_.readOptional(1, com.zeroc.Ice.OptionalFormat.F4))
        {
            costInForeignCurrency = istr_.readFloat();
        }
        if(_foreignCurrency = istr_.readOptional(2, com.zeroc.Ice.OptionalFormat.Size))
        {
            foreignCurrency = Currency.ice_read(istr_);
        }
        istr_.endSlice();
    }
}
